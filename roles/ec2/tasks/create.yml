---
# tasks file for ec2

- name: Create Key Pair
  ec2_key:
    name: "{{ ec2_aws_key_name }}"
    region: "{{ aws_region }}"
  register: ec2_key
  
# - debug:
#     msg: "{{ ec2_key }}"

- name: Save private key
  copy:
    content: "{{ ec2_key.key.private_key }}" 
    dest: "./{{ ec2_aws_key_name }}"
    mode: 0600
  when: ec2_key.changed

- name: Create Security Group
  ec2_group:
    name: "{{ ec2_security_group }}"
    description: Default web Ports
    vpc_id: "{{ vpc.vpc.id }}"
    region: "{{ aws_region }}"
    rules:
    - proto: tcp
      from_port: 22
      to_port: 22
      cidr_ip: 0.0.0.0/0      
    - proto: tcp
      from_port: 80
      to_port: 80
      cidr_ip: 0.0.0.0/0
    - proto: tcp
      from_port: 443
      to_port: 443
      cidr_ip: 0.0.0.0/0

- name: Create Instance
  connection: local
  ec2:
    key_name: "{{ ec2_aws_key_name }}"
    group: "{{ ec2_security_group }}"
    instance_type: t2.medium
    image: "{{ ami_id }}"
    vpc_subnet_id: "{{ public_subnet.subnet.id }}"
    region: "{{ aws_region }}"
    instance_tags:
      Name: "{{ ec2_instance_name }}"
      Createdby: ansible
      OS: CoreOS
    assign_public_ip: yes
    wait: yes
    user_data: "{{ lookup('file', 'roles/ec2/files/coreos_user_data') }}"
  register: ec2  

- name: Wait for instance to be up
  wait_for:
    host: "{{ item.public_ip }}"
    port: 80
    delay: 20
    timeout: 180
    state: started
  with_items: "{{ ec2.instances }}"

- name: Output
  debug: msg="Access web application using http://{{ item.public_dns_name }} or http://{{ item.public_ip }}"
  with_items: "{{ ec2.instances }}"

# - debug:
#     msg: "Access web app using http://{{ item.public_dns_name }} or"
#     with_items: "{{ ec2.instances }}"  

# - debug:
#     msg: "Access web app using http://{{ item.public_ip }} or"
#     with_items: "{{ ec2.instances }}" 

# - name: Add instance to host group
#   add_host: 
#     hostname: "{{ item.public_ip }}"
#     groups: ec2host
#     ansible_ssh_user: core
#     ansible_ssh_private_key_file: "./{{ ec2_aws_key_name }}"
#     ansible_python_interpreter: '/home/core/bin/python'
#   with_items: "{{ ec2.instances }}"

# - name: Wait for instance to be up
#   wait_for:
#     host: "{{ item.public_ip }}"
#     port: 22
#     delay: 10
#     timeout: 120
#     state: started
#   with_items: "{{ ec2.instances }}"

# - name: Add new server to group
#   add_host:
#     name: "{{item.private_ip}}"
#     groups: new         
#   with_items: "{{ ec2.instances }}" 

 