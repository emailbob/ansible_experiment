---
# tasks file for ec2

- name: Create Key Pair
  ec2_key:
    name: "{{ ec2_aws_key_name }}"
    region: "{{ aws_region }}"
  register: ec2_key
  
# - debug:
#     msg: "{{ ec2_key }}"

- name: Save private key
  copy:
    content: "{{ ec2_key.key.private_key }}" 
    dest: "./{{ ec2_aws_key_name }}"
    mode: 0600
  when: ec2_key.changed

- name: Create Security Group
  ec2_group:
    name: "{{ ec2_security_group }}"
    description: Default web Ports
    vpc_id: "{{ vpc.vpc.id }}"
    region: "{{ aws_region }}"
    rules:
    - proto: tcp
      from_port: 22
      to_port: 22
      cidr_ip: 0.0.0.0/0      
    - proto: tcp
      from_port: 80
      to_port: 80
      cidr_ip: 0.0.0.0/0
    - proto: tcp
      from_port: 443
      to_port: 443
      cidr_ip: 0.0.0.0/0

- name: Does EC2 instance already exist
  connection: local
  ec2_remote_facts:
    filters:
      instance-state-name: [ 'running', 'stopped', 'starting' ]
      "tag:Name": "{{ ec2_instance_name }}"
    region: "{{ aws_region }}"
  register: ec2_exist

- debug:
    msg: "{{ ec2_exist }}"

- name: Create EC2 instance
  connection: local
  ec2:
    key_name: "{{ ec2_aws_key_name }}"
    group: "{{ ec2_security_group }}"
    instance_type: t2.medium
    image: "{{ ami_id }}"
    vpc_subnet_id: "{{ public_subnet.subnet.id }}"
    region: "{{ aws_region }}"
    instance_tags:
      Name: "{{ ec2_instance_name }}"
      Createdby: ansible
      OS: CoreOS
    assign_public_ip: yes
    wait: yes
    user_data: "{{ lookup('file', 'roles/ec2/files/coreos_user_data') }}"
  register: ec2  
  when: ec2_exist.instances[0] is not defined

- name: Wait for web application to be up
  wait_for:
    host: "{{ item.public_ip }}"
    port: 80
    delay: 20
    timeout: 180
    state: started
  with_items: "{{ ec2.instances }}"
  when: ec2_exist.instances[0] is not defined

- set_fact: 
    dns_name="{{ item.public_dns_name }}"
    public_ip="{{ item.public_ip_address }}"
  with_items: "{{ ec2_exist.instances }}"
  when: ec2_exist.instances[0] is defined

- set_fact: 
    dns_name="{{ item.public_dns_name }}"
    public_ip="{{ item.public_ip }}"
  with_items: "{{ ec2.instances }}"
  when: ec2_exist.instances[0] is not defined

# - debug: 
#     msg: "Access web application using http://{{ item.public_dns_name }} or http://{{ item.public_ip }}"
#   with_items: "{{ ec2.instances }}"
#   when: ec2_exist.instances[0] is not defined

# - name: Post Output
#   debug: 
#     msg: "Access web application using"
#       - "http://{{ dns_name }}"
#       - "http://{{ public_ip }}"
#   when: ec2_exist.instances[0] is defined

- name: Post Output
  debug: 
    msg: "Access web application using http://{{ dns_name }} or http://{{ public_ip }}" 